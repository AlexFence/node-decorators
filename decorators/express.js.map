{"version":3,"file":"express.js","sourceRoot":"","sources":["express.ts"],"names":[],"mappings":";AAAA,wBAAuB,SAAS,CAAC,CAAA;AACjC,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AAEnC,iBAAiB,CAAC,EAAE,CAAC;IACnB,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QACtB,MAAM,CAAC,CAAC,CAAC,CAAC;IACZ,CAAC;IAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7B,MAAM,CAAC,CAAC,CAAC;IACX,CAAC;IACD,MAAM,CAAC,CAAC,CAAC;AACX,CAAC;AAED,2BAA2B,GAAG,EAAE,GAAG,EAAE,MAAM;IACzC,IAAI,IAAI,GAAG,EAAE,CAAC;IACd,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAE9B,GAAG,CAAC,CAAa,UAAM,EAAN,iBAAM,EAAN,oBAAM,EAAN,IAAM,CAAC;QAAnB,IAAI,IAAI,eAAA;QACX,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,SAAS,CAAC,CAAC,CAAC;YAC5B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;QACD,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC;YAC7B,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACjB,CAAC;QACD,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;KACnB;IAED,MAAM,CAAC,IAAI,CAAC;AACd,CAAC;AAEU,WAAG,GAAG;IAEf,IAAI,GAAG,GAAQ,OAAO,EAAE,CAAC;IAEzB,GAAG,CAAC,YAAY,CAAC,GAAG,UAAA,UAAU;QAC5B,IAAI,UAAU,GAAG,IAAI,UAAU,EAAE,EAC/B,MAAM,GAAG,gBAAM,EAAE,EACjB,MAAM,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,EACnC,UAAU,GAAG,UAAU,CAAC,QAAQ,CAAC,UAAU,EAC3C,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,OAAO,EACrC,MAAM,GAAG,UAAU,CAAC,QAAQ,CAAC,MAAM,CAAC;QAEtC;YACE,IAAI,MAAM,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,EAAE,EAAE,SAAA,CAAC;YAE3C,EAAE,GAAG,UAAC,GAAG,EAAE,GAAG;gBACZ,IAAI,IAAI,GAAG,iBAAiB,CAAC,GAAG,EAAE,GAAG,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC3D,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,UAAU,EAAE,IAAI,CAAC,CAAA;YACvD,CAAC,CAAC;YAGF,MAAM,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE;gBAC3B,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG;qBAAK,UAAU,CAAC,UAAU,CAAC;gBAAE,EAAE;cACtD,CAAC,CAAC;;QAXL,GAAG,CAAC,CAAC,IAAI,UAAU,IAAI,MAAM,CAAC;;SAY7B;QAED,GAAG,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QAEzB,MAAM,CAAC,GAAG,CAAC;IACb,CAAC,CAAC;IAEF,MAAM,CAAC,GAAG,CAAC;AAEb,CAAC,CAAC","sourcesContent":["import { Router } from 'express';\nimport * as express from 'express';\n\nfunction compare(a, b) {\n  if (a.index < b.index) {\n    return -1;\n  } else if (a.index > b.index) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction extractParameters(req, res, params) {\n  let args = [];\n  params = params.sort(compare);\n\n  for (let item of params) {\n    if (item.type === 'request') {\n      args.push(req);\n    }\n    if (item.type === 'response') {\n      args.push(res);\n    }\n    console.log(item);\n  }\n\n  return args;\n}\n\nexport let App = () => {\n\n  let app: any = express();\n\n  app['controller'] = Controller => {\n    let controller = new Controller(),\n      router = Router(),\n      routes = controller.__meta__.routes,\n      middleware = controller.__meta__.middleware,\n      baseUrl = controller.__meta__.baseUrl,\n      params = controller.__meta__.params;\n\n    for (let methodName in routes) {\n      let method = routes[methodName].method, fn;\n\n      fn = (req, res) => {\n        let args = extractParameters(req, res, params[methodName]);\n        return controller[methodName].apply(controller, args)\n      };\n\n\n      router[method].apply(router, [\n        routes[methodName].url, ...middleware[methodName], fn\n      ]);\n    }\n\n    app.use(baseUrl, router);\n\n    return app;\n  };\n\n  return app;\n\n};\n"]}