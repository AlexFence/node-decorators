{"version":3,"file":"mongoose.js","sourceRoot":"","sources":["mongoose.ts"],"names":[],"mappings":";AAAA,yBAAkE,UAAU,CAAC,CAAA;AAC7E,sBAAgC,UAAU,CAAC,CAAA;AAE3C,2BAAsD,aAAa;IACjE,IAAI,IAAI,GAAkB,uBAAe,CAAC,aAAa,CAAC,SAAS,CAAC,EAChE,MAAM,GAAW,IAAI,iBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EACxC,KAAK,GAAG,aAAa,CAAC,SAAS,CAAC;IAElC,GAAG,CAAC,CAAY,UAAyC,EAAzC,KAAA,MAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,EAAzC,cAAyC,EAAzC,IAAyC,CAAC;QAArD,IAAI,GAAG,SAAA;QACV,EAAE,CAAC,CAAC,OAAO,aAAa,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;QAC3C,CAAC;KACF;IACD,IAAI,SAAS,GAAa,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,EACzD,KAAK,GAAW,SAAS,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IACnD,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC3B,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;IACtC,SAAS,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;IAC3B,GAAG,CAAC,CAAY,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS,CAAC;QAArB,IAAI,GAAG,kBAAA;QACV,EAAE,CAAC,CAAC,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;QACnC,CAAC;KACF;IAED,MAAM,CAAC,gBAAK,CAAI,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;AACrC,CAAC;AAtBe,yBAAiB,oBAsBhC,CAAA","sourcesContent":["import { Schema, model as Model, Model as IModel, Document } from 'mongoose';\nimport { getMongooseMeta } from '../utils';\n\nexport function bootstrapMongoose<T extends Document>(MongooseModel): IModel<T> {\n  let meta: IMongooseMeta = getMongooseMeta(MongooseModel.prototype),\n    schema: Schema = new Schema(meta.schema),\n    model = MongooseModel.prototype;\n\n  for (let key of Object.getOwnPropertyNames(MongooseModel)) {\n    if (typeof MongooseModel[key] === 'function') {\n      schema.statics[key] = MongooseModel[key];\n    }\n  }\n  let modelKeys: string[] = Object.getOwnPropertyNames(model),\n    index: number = modelKeys.indexOf('constructor');\n  modelKeys.splice(index, 1);\n  index = modelKeys.indexOf('__meta__');\n  modelKeys.splice(index, 1);\n  for (let key of modelKeys) {\n    if (typeof model[key] === 'function') {\n      schema.methods[key] = model[key];\n    }\n  }\n\n  return Model<T>(meta.name, schema);\n}\n"]}