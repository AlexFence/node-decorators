{"version":3,"file":"mongoose.js","sourceRoot":"","sources":["mongoose.ts"],"names":[],"mappings":";AAAA,yBAAkE,UAAU,CAAC,CAAA;AAC7E,sBAAgC,UAAU,CAAC,CAAA;AAE3C,IAAI,SAAS,GAAa,CAAC,QAAQ,EAAE,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,aAAa,CAAC,CAAA;AAEpF,2BAA2B,IAAc;IACvC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,UAAA,IAAI;QACrB,MAAM,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;IACxC,CAAC,CAAC,CAAA;AACJ,CAAC;AAED,2BAAsD,aAAa;IACjE,IAAI,IAAI,GAAkB,uBAAe,CAAC,aAAa,CAAC,SAAS,CAAC,EAChE,MAAM,GAAW,IAAI,iBAAM,CAAC,IAAI,CAAC,MAAM,CAAC,EACxC,KAAK,GAAG,aAAa,CAAC,SAAS,EAC/B,UAAU,GAAa,iBAAiB,CAAC,MAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,CAAC,EACnF,YAAY,GAAa,iBAAiB,CAAC,MAAM,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,CAAC;IAEhF,GAAG,CAAC,CAAY,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,CAAC;QAAtB,IAAI,GAAG,mBAAA;QACV,EAAE,CAAC,CAAC,OAAO,aAAa,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;YAC7C,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;QAC3C,CAAC;KACF;IAED,GAAG,CAAC,CAAY,UAAY,EAAZ,6BAAY,EAAZ,0BAAY,EAAZ,IAAY,CAAC;QAAxB,IAAI,GAAG,qBAAA;QACV,EAAE,CAAC,CAAC,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;YACrC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;QACnC,CAAC;KACF;IAED,KAAK,GAAG,gBAAK,CAAI,IAAI,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAEpC,GAAG,CAAC,CAAY,UAAU,EAAV,yBAAU,EAAV,wBAAU,EAAV,IAAU,CAAC;QAAtB,IAAI,GAAG,mBAAA;QACV,EAAE,CAAC,CAAC,OAAO,aAAa,CAAC,GAAG,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;YAC7C,KAAK,CAAC,GAAG,CAAC,GAAG,aAAa,CAAC,GAAG,CAAC,CAAC;QAClC,CAAC;KACF;IAED,MAAM,CAAC,KAAK,CAAC;AACf,CAAC;AA5Be,yBAAiB,oBA4BhC,CAAA","sourcesContent":["import { Schema, model as Model, Model as IModel, Document } from 'mongoose';\nimport { getMongooseMeta } from '../utils';\n\nlet blacklist: string[] = ['length', 'name', 'prototype', '__meta__', 'constructor']\n\nfunction removeBlacklisted(keys: string[]) {\n  return keys.filter(item => {\n    return blacklist.indexOf(item) === -1;\n  })\n}\n\nexport function bootstrapMongoose<T extends Document>(MongooseModel): IModel<T> {\n  let meta: IMongooseMeta = getMongooseMeta(MongooseModel.prototype),\n    schema: Schema = new Schema(meta.schema),\n    model = MongooseModel.prototype,\n    staticKeys: string[] = removeBlacklisted(Object.getOwnPropertyNames(MongooseModel)),\n    instanceKeys: string[] = removeBlacklisted(Object.getOwnPropertyNames(model));\n\n  for (let key of staticKeys) {\n    if (typeof MongooseModel[key] === 'function') {\n      schema.statics[key] = MongooseModel[key];\n    }\n  }\n\n  for (let key of instanceKeys) {\n    if (typeof model[key] === 'function') {\n      schema.methods[key] = model[key];\n    }\n  }\n\n  model = Model<T>(meta.name, schema);\n\n  for (let key of staticKeys) {\n    if (typeof MongooseModel[key] !== 'function') {\n      model[key] = MongooseModel[key];\n    }\n  }\n\n  return model;\n}\n"]}